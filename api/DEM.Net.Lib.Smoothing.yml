### YamlMime:ManagedReference
items:
- uid: DEM.Net.Lib.Smoothing
  commentId: T:DEM.Net.Lib.Smoothing
  id: Smoothing
  parent: DEM.Net.Lib
  children:
  - DEM.Net.Lib.Smoothing.FeedbackSmooth(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Single,System.Single)
  - DEM.Net.Lib.Smoothing.WindowSmooth(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Double[])
  langs:
  - csharp
  - vb
  name: Smoothing
  nameWithType: Smoothing
  fullName: DEM.Net.Lib.Smoothing
  type: Class
  source:
    remote:
      path: DEM.Net.Lib/Services/Smoothing.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: Smoothing
    path: ../DEM.Net.Lib/Services/Smoothing.cs
    startLine: 8
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public static class Smoothing
    content.vb: Public Module Smoothing
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DEM.Net.Lib.Smoothing.WindowSmooth(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Double[])
  commentId: M:DEM.Net.Lib.Smoothing.WindowSmooth(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Double[])
  id: WindowSmooth(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Double[])
  parent: DEM.Net.Lib.Smoothing
  langs:
  - csharp
  - vb
  name: WindowSmooth(List<GeoPoint>, Double[])
  nameWithType: Smoothing.WindowSmooth(List<GeoPoint>, Double[])
  fullName: DEM.Net.Lib.Smoothing.WindowSmooth(System.Collections.Generic.List<DEM.Net.Lib.GeoPoint>, System.Double[])
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Smoothing.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: WindowSmooth
    path: ../DEM.Net.Lib/Services/Smoothing.cs
    startLine: 17
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  summary: "\nWindowSmooth\nSource : https://github.com/Andy9FromSpace/map-elevation\n"
  example: []
  syntax:
    content: public static void WindowSmooth(List<GeoPoint> nodes, double[] smoothingFilter)
    parameters:
    - id: nodes
      type: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
      description: ''
    - id: smoothingFilter
      type: System.Double[]
      description: test with new float[] { 0.1f, 1f, 0.1f } for 1arc /second
    content.vb: Public Shared Sub WindowSmooth(nodes As List(Of GeoPoint), smoothingFilter As Double())
  overload: DEM.Net.Lib.Smoothing.WindowSmooth*
  nameWithType.vb: Smoothing.WindowSmooth(List(Of GeoPoint), Double())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DEM.Net.Lib.Smoothing.WindowSmooth(System.Collections.Generic.List(Of DEM.Net.Lib.GeoPoint), System.Double())
  name.vb: WindowSmooth(List(Of GeoPoint), Double())
- uid: DEM.Net.Lib.Smoothing.FeedbackSmooth(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Single,System.Single)
  commentId: M:DEM.Net.Lib.Smoothing.FeedbackSmooth(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Single,System.Single)
  id: FeedbackSmooth(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Single,System.Single)
  parent: DEM.Net.Lib.Smoothing
  langs:
  - csharp
  - vb
  name: FeedbackSmooth(List<GeoPoint>, Single, Single)
  nameWithType: Smoothing.FeedbackSmooth(List<GeoPoint>, Single, Single)
  fullName: DEM.Net.Lib.Smoothing.FeedbackSmooth(System.Collections.Generic.List<DEM.Net.Lib.GeoPoint>, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Smoothing.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: FeedbackSmooth
    path: ../DEM.Net.Lib/Services/Smoothing.cs
    startLine: 36
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  summary: "\nFeedbackSmooth\nSource : https://github.com/Andy9FromSpace/map-elevation\n"
  example: []
  syntax:
    content: public static void FeedbackSmooth(List<GeoPoint> nodes, float feedbackWeight, float currentWeight)
    parameters:
    - id: nodes
      type: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
      description: ''
    - id: feedbackWeight
      type: System.Single
    - id: currentWeight
      type: System.Single
    content.vb: Public Shared Sub FeedbackSmooth(nodes As List(Of GeoPoint), feedbackWeight As Single, currentWeight As Single)
  overload: DEM.Net.Lib.Smoothing.FeedbackSmooth*
  nameWithType.vb: Smoothing.FeedbackSmooth(List(Of GeoPoint), Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DEM.Net.Lib.Smoothing.FeedbackSmooth(System.Collections.Generic.List(Of DEM.Net.Lib.GeoPoint), System.Single, System.Single)
  name.vb: FeedbackSmooth(List(Of GeoPoint), Single, Single)
references:
- uid: DEM.Net.Lib
  commentId: N:DEM.Net.Lib
  name: DEM.Net.Lib
  nameWithType: DEM.Net.Lib
  fullName: DEM.Net.Lib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DEM.Net.Lib.Smoothing.WindowSmooth*
  commentId: Overload:DEM.Net.Lib.Smoothing.WindowSmooth
  name: WindowSmooth
  nameWithType: Smoothing.WindowSmooth
  fullName: DEM.Net.Lib.Smoothing.WindowSmooth
- uid: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
  commentId: T:System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<GeoPoint>
  nameWithType: List<GeoPoint>
  fullName: System.Collections.Generic.List<DEM.Net.Lib.GeoPoint>
  nameWithType.vb: List(Of GeoPoint)
  fullName.vb: System.Collections.Generic.List(Of DEM.Net.Lib.GeoPoint)
  name.vb: List(Of GeoPoint)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DEM.Net.Lib.Smoothing.FeedbackSmooth*
  commentId: Overload:DEM.Net.Lib.Smoothing.FeedbackSmooth
  name: FeedbackSmooth
  nameWithType: Smoothing.FeedbackSmooth
  fullName: DEM.Net.Lib.Smoothing.FeedbackSmooth
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
