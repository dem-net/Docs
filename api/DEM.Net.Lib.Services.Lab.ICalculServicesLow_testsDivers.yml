### YamlMime:ManagedReference
items:
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers
  commentId: T:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers
  id: ICalculServicesLow_testsDivers
  parent: DEM.Net.Lib.Services.Lab
  children:
  - DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle(System.Collections.Generic.List{System.Double[]})
  - DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement(System.Collections.Generic.Dictionary{System.Int32,System.Double[]},System.Boolean,System.Boolean)
  - DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice(System.Collections.Generic.List{System.Double[]},System.Double[])
  - DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite(System.Collections.Generic.List{System.Double[]},System.Double[])
  langs:
  - csharp
  - vb
  name: ICalculServicesLow_testsDivers
  nameWithType: ICalculServicesLow_testsDivers
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers
  type: Interface
  source:
    remote:
      path: DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: ICalculServicesLow_testsDivers
    path: ../DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
    startLine: 4
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib.Services.Lab
  syntax:
    content: public interface ICalculServicesLow_testsDivers
    content.vb: Public Interface ICalculServicesLow_testsDivers
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle(System.Collections.Generic.List{System.Double[]})
  commentId: M:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle(System.Collections.Generic.List{System.Double[]})
  id: GetCoordonneesCercleCirconscritAuTriangle(System.Collections.Generic.List{System.Double[]})
  parent: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers
  langs:
  - csharp
  - vb
  name: GetCoordonneesCercleCirconscritAuTriangle(List<Double[]>)
  nameWithType: ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle(List<Double[]>)
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle(System.Collections.Generic.List<System.Double[]>)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetCoordonneesCercleCirconscritAuTriangle
    path: ../DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
    startLine: 6
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib.Services.Lab
  syntax:
    content: double[] GetCoordonneesCercleCirconscritAuTriangle(List<double[]> p_pointsTriangle)
    parameters:
    - id: p_pointsTriangle
      type: System.Collections.Generic.List{System.Double[]}
    return:
      type: System.Double[]
    content.vb: Function GetCoordonneesCercleCirconscritAuTriangle(p_pointsTriangle As List(Of Double())) As Double()
  overload: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle*
  nameWithType.vb: ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle(List(Of Double()))
  fullName.vb: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle(System.Collections.Generic.List(Of System.Double()))
  name.vb: GetCoordonneesCercleCirconscritAuTriangle(List(Of Double()))
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice(System.Collections.Generic.List{System.Double[]},System.Double[])
  commentId: M:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice(System.Collections.Generic.List{System.Double[]},System.Double[])
  id: IsPointDDansCercleCirconscritAuTriangleByMatrice(System.Collections.Generic.List{System.Double[]},System.Double[])
  parent: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers
  langs:
  - csharp
  - vb
  name: IsPointDDansCercleCirconscritAuTriangleByMatrice(List<Double[]>, Double[])
  nameWithType: ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice(List<Double[]>, Double[])
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice(System.Collections.Generic.List<System.Double[]>, System.Double[])
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: IsPointDDansCercleCirconscritAuTriangleByMatrice
    path: ../DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
    startLine: 7
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib.Services.Lab
  syntax:
    content: bool IsPointDDansCercleCirconscritAuTriangleByMatrice(List<double[]> p_pointsTriangle, double[] p_coordPtD)
    parameters:
    - id: p_pointsTriangle
      type: System.Collections.Generic.List{System.Double[]}
    - id: p_coordPtD
      type: System.Double[]
    return:
      type: System.Boolean
    content.vb: Function IsPointDDansCercleCirconscritAuTriangleByMatrice(p_pointsTriangle As List(Of Double()), p_coordPtD As Double()) As Boolean
  overload: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice*
  nameWithType.vb: ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice(List(Of Double()), Double())
  fullName.vb: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice(System.Collections.Generic.List(Of System.Double()), System.Double())
  name.vb: IsPointDDansCercleCirconscritAuTriangleByMatrice(List(Of Double()), Double())
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite(System.Collections.Generic.List{System.Double[]},System.Double[])
  commentId: M:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite(System.Collections.Generic.List{System.Double[]},System.Double[])
  id: IsPointDDansCercleCirconscritAuTriangleExplicite(System.Collections.Generic.List{System.Double[]},System.Double[])
  parent: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers
  langs:
  - csharp
  - vb
  name: IsPointDDansCercleCirconscritAuTriangleExplicite(List<Double[]>, Double[])
  nameWithType: ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite(List<Double[]>, Double[])
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite(System.Collections.Generic.List<System.Double[]>, System.Double[])
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: IsPointDDansCercleCirconscritAuTriangleExplicite
    path: ../DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
    startLine: 8
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib.Services.Lab
  syntax:
    content: bool IsPointDDansCercleCirconscritAuTriangleExplicite(List<double[]> p_pointsTriangle, double[] p_pointToTest)
    parameters:
    - id: p_pointsTriangle
      type: System.Collections.Generic.List{System.Double[]}
    - id: p_pointToTest
      type: System.Double[]
    return:
      type: System.Boolean
    content.vb: Function IsPointDDansCercleCirconscritAuTriangleExplicite(p_pointsTriangle As List(Of Double()), p_pointToTest As Double()) As Boolean
  overload: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite*
  nameWithType.vb: ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite(List(Of Double()), Double())
  fullName.vb: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite(System.Collections.Generic.List(Of System.Double()), System.Double())
  name.vb: IsPointDDansCercleCirconscritAuTriangleExplicite(List(Of Double()), Double())
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement(System.Collections.Generic.Dictionary{System.Int32,System.Double[]},System.Boolean,System.Boolean)
  commentId: M:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement(System.Collections.Generic.Dictionary{System.Int32,System.Double[]},System.Boolean,System.Boolean)
  id: GetOrdonnancement(System.Collections.Generic.Dictionary{System.Int32,System.Double[]},System.Boolean,System.Boolean)
  parent: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers
  langs:
  - csharp
  - vb
  name: GetOrdonnancement(Dictionary<Int32, Double[]>, Boolean, Boolean)
  nameWithType: ICalculServicesLow_testsDivers.GetOrdonnancement(Dictionary<Int32, Double[]>, Boolean, Boolean)
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement(System.Collections.Generic.Dictionary<System.Int32, System.Double[]>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetOrdonnancement
    path: ../DEM.Net.Lib/Services/Lab/ICalculServicesLow_testsDivers.cs
    startLine: 9
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib.Services.Lab
  syntax:
    content: List<int> GetOrdonnancement(Dictionary<int, double[]> p_pointsATester, bool p_renvoyerNullSiColineaires_vf, bool p_horaireSinonAntohoraire_vf)
    parameters:
    - id: p_pointsATester
      type: System.Collections.Generic.Dictionary{System.Int32,System.Double[]}
    - id: p_renvoyerNullSiColineaires_vf
      type: System.Boolean
    - id: p_horaireSinonAntohoraire_vf
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Function GetOrdonnancement(p_pointsATester As Dictionary(Of Integer, Double()), p_renvoyerNullSiColineaires_vf As Boolean, p_horaireSinonAntohoraire_vf As Boolean) As List(Of Integer)
  overload: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement*
  nameWithType.vb: ICalculServicesLow_testsDivers.GetOrdonnancement(Dictionary(Of Int32, Double()), Boolean, Boolean)
  fullName.vb: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement(System.Collections.Generic.Dictionary(Of System.Int32, System.Double()), System.Boolean, System.Boolean)
  name.vb: GetOrdonnancement(Dictionary(Of Int32, Double()), Boolean, Boolean)
references:
- uid: DEM.Net.Lib.Services.Lab
  commentId: N:DEM.Net.Lib.Services.Lab
  name: DEM.Net.Lib.Services.Lab
  nameWithType: DEM.Net.Lib.Services.Lab
  fullName: DEM.Net.Lib.Services.Lab
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle*
  commentId: Overload:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle
  name: GetCoordonneesCercleCirconscritAuTriangle
  nameWithType: ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetCoordonneesCercleCirconscritAuTriangle
- uid: System.Collections.Generic.List{System.Double[]}
  commentId: T:System.Collections.Generic.List{System.Double[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double[]>
  nameWithType: List<Double[]>
  fullName: System.Collections.Generic.List<System.Double[]>
  nameWithType.vb: List(Of Double())
  fullName.vb: System.Collections.Generic.List(Of System.Double())
  name.vb: List(Of Double())
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice*
  commentId: Overload:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice
  name: IsPointDDansCercleCirconscritAuTriangleByMatrice
  nameWithType: ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleByMatrice
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite*
  commentId: Overload:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite
  name: IsPointDDansCercleCirconscritAuTriangleExplicite
  nameWithType: ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.IsPointDDansCercleCirconscritAuTriangleExplicite
- uid: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement*
  commentId: Overload:DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement
  name: GetOrdonnancement
  nameWithType: ICalculServicesLow_testsDivers.GetOrdonnancement
  fullName: DEM.Net.Lib.Services.Lab.ICalculServicesLow_testsDivers.GetOrdonnancement
- uid: System.Collections.Generic.Dictionary{System.Int32,System.Double[]}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.Double[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int32, Double[]>
  nameWithType: Dictionary<Int32, Double[]>
  fullName: System.Collections.Generic.Dictionary<System.Int32, System.Double[]>
  nameWithType.vb: Dictionary(Of Int32, Double())
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int32, System.Double())
  name.vb: Dictionary(Of Int32, Double())
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
