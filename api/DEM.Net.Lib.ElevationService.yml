### YamlMime:ManagedReference
items:
- uid: DEM.Net.Lib.ElevationService
  commentId: T:DEM.Net.Lib.ElevationService
  id: ElevationService
  parent: DEM.Net.Lib
  children:
  - DEM.Net.Lib.ElevationService.#ctor(DEM.Net.Lib.IRasterService)
  - DEM.Net.Lib.ElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
  - DEM.Net.Lib.ElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
  - DEM.Net.Lib.ElevationService.ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
  - DEM.Net.Lib.ElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  - DEM.Net.Lib.ElevationService.GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  - DEM.Net.Lib.ElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  - DEM.Net.Lib.ElevationService.GetElevationData(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.RasterFileDictionary,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata},DEM.Net.Lib.IInterpolator)
  - DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
  - DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
  - DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
  - DEM.Net.Lib.ElevationService.GetInterpolator(DEM.Net.Lib.InterpolationMode)
  - DEM.Net.Lib.ElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  - DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  - DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  - DEM.Net.Lib.ElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  - DEM.Net.Lib.ElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  - DEM.Net.Lib.ElevationService.GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  - DEM.Net.Lib.ElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
  - DEM.Net.Lib.ElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  - DEM.Net.Lib.ElevationService.GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  - DEM.Net.Lib.ElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
  - DEM.Net.Lib.ElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
  - DEM.Net.Lib.ElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,System.Double,System.Double)
  - DEM.Net.Lib.ElevationService.NO_DATA_OUT
  langs:
  - csharp
  - vb
  name: ElevationService
  nameWithType: ElevationService
  fullName: DEM.Net.Lib.ElevationService
  type: Class
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: ElevationService
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 15
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: 'public class ElevationService : IElevationService'
    content.vb: >-
      Public Class ElevationService
          Implements IElevationService
  inheritance:
  - System.Object
  implements:
  - DEM.Net.Lib.IElevationService
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DEM.Net.Lib.ElevationService.NO_DATA_OUT
  commentId: F:DEM.Net.Lib.ElevationService.NO_DATA_OUT
  id: NO_DATA_OUT
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: NO_DATA_OUT
  nameWithType: ElevationService.NO_DATA_OUT
  fullName: DEM.Net.Lib.ElevationService.NO_DATA_OUT
  type: Field
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: NO_DATA_OUT
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 17
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public const float NO_DATA_OUT = 0F
    return:
      type: System.Single
    content.vb: Public Const NO_DATA_OUT As Single = 0F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DEM.Net.Lib.ElevationService.#ctor(DEM.Net.Lib.IRasterService)
  commentId: M:DEM.Net.Lib.ElevationService.#ctor(DEM.Net.Lib.IRasterService)
  id: '#ctor(DEM.Net.Lib.IRasterService)'
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: ElevationService(IRasterService)
  nameWithType: ElevationService.ElevationService(IRasterService)
  fullName: DEM.Net.Lib.ElevationService.ElevationService(DEM.Net.Lib.IRasterService)
  type: Constructor
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: .ctor
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 19
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public ElevationService(IRasterService rasterService)
    parameters:
    - id: rasterService
      type: DEM.Net.Lib.IRasterService
    content.vb: Public Sub New(rasterService As IRasterService)
  overload: DEM.Net.Lib.ElevationService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  commentId: M:DEM.Net.Lib.ElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  id: GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetDEMLocalPath(DEMDataSet)
  nameWithType: ElevationService.GetDEMLocalPath(DEMDataSet)
  fullName: DEM.Net.Lib.ElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetDEMLocalPath
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 25
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public string GetDEMLocalPath(DEMDataSet dataSet)
    parameters:
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    return:
      type: System.String
    content.vb: Public Function GetDEMLocalPath(dataSet As DEMDataSet) As String
  overload: DEM.Net.Lib.ElevationService.GetDEMLocalPath*
  implements:
  - DEM.Net.Lib.IElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
  commentId: M:DEM.Net.Lib.ElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
  id: DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: DownloadMissingFiles(DEMDataSet, BoundingBox)
  nameWithType: ElevationService.DownloadMissingFiles(DEMDataSet, BoundingBox)
  fullName: DEM.Net.Lib.ElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.BoundingBox)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: DownloadMissingFiles
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 30
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public void DownloadMissingFiles(DEMDataSet dataSet, BoundingBox bbox = null)
    parameters:
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: bbox
      type: DEM.Net.Lib.BoundingBox
    content.vb: Public Sub DownloadMissingFiles(dataSet As DEMDataSet, bbox As BoundingBox = Nothing)
  overload: DEM.Net.Lib.ElevationService.DownloadMissingFiles*
  implements:
  - DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
  commentId: M:DEM.Net.Lib.ElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
  id: DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: DownloadMissingFiles(DEMDataSet, Double, Double)
  nameWithType: ElevationService.DownloadMissingFiles(DEMDataSet, Double, Double)
  fullName: DEM.Net.Lib.ElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: DownloadMissingFiles
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 37
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public void DownloadMissingFiles(DEMDataSet dataSet, double lat, double lon)
    parameters:
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: lat
      type: System.Double
    - id: lon
      type: System.Double
    content.vb: Public Sub DownloadMissingFiles(dataSet As DEMDataSet, lat As Double, lon As Double)
  overload: DEM.Net.Lib.ElevationService.DownloadMissingFiles*
  implements:
  - DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  id: GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetLineGeometryElevation(String, DEMDataSet, InterpolationMode)
  nameWithType: ElevationService.GetLineGeometryElevation(String, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.String, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetLineGeometryElevation
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 148
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  summary: "\nExtract elevation data along line path\n"
  example: []
  syntax:
    content: public List<GeoPoint> GetLineGeometryElevation(string lineWKT, DEMDataSet dataSet, InterpolationMode interpolationMode = InterpolationMode.Bilinear)
    parameters:
    - id: lineWKT
      type: System.String
      description: ''
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: interpolationMode
      type: DEM.Net.Lib.InterpolationMode
    return:
      type: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
      description: ''
    content.vb: Public Function GetLineGeometryElevation(lineWKT As String, dataSet As DEMDataSet, interpolationMode As InterpolationMode = InterpolationMode.Bilinear) As List(Of GeoPoint)
  overload: DEM.Net.Lib.ElevationService.GetLineGeometryElevation*
  implements:
  - DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.ElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  id: GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetLineGeometryElevation(IGeometry, DEMDataSet, InterpolationMode)
  nameWithType: ElevationService.GetLineGeometryElevation(IGeometry, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.ElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetLineGeometryElevation
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 160
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public List<GeoPoint> GetLineGeometryElevation(IGeometry lineStringGeometry, DEMDataSet dataSet, InterpolationMode interpolationMode = InterpolationMode.Bilinear)
    parameters:
    - id: lineStringGeometry
      type: GeoAPI.Geometries.IGeometry
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: interpolationMode
      type: DEM.Net.Lib.InterpolationMode
    return:
      type: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
    content.vb: Public Function GetLineGeometryElevation(lineStringGeometry As IGeometry, dataSet As DEMDataSet, interpolationMode As InterpolationMode = InterpolationMode.Bilinear) As List(Of GeoPoint)
  overload: DEM.Net.Lib.ElevationService.GetLineGeometryElevation*
  implements:
  - DEM.Net.Lib.IElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  id: GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetLineGeometryElevation(IEnumerable<GeoPoint>, DEMDataSet, InterpolationMode)
  nameWithType: ElevationService.GetLineGeometryElevation(IEnumerable<GeoPoint>, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable<DEM.Net.Lib.GeoPoint>, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetLineGeometryElevation
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 219
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public List<GeoPoint> GetLineGeometryElevation(IEnumerable<GeoPoint> lineGeoPoints, DEMDataSet dataSet, InterpolationMode interpolationMode = InterpolationMode.Bilinear)
    parameters:
    - id: lineGeoPoints
      type: System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint}
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: interpolationMode
      type: DEM.Net.Lib.InterpolationMode
    return:
      type: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
    content.vb: Public Function GetLineGeometryElevation(lineGeoPoints As IEnumerable(Of GeoPoint), dataSet As DEMDataSet, interpolationMode As InterpolationMode = InterpolationMode.Bilinear) As List(Of GeoPoint)
  overload: DEM.Net.Lib.ElevationService.GetLineGeometryElevation*
  implements:
  - DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  nameWithType.vb: ElevationService.GetLineGeometryElevation(IEnumerable(Of GeoPoint), DEMDataSet, InterpolationMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DEM.Net.Lib.ElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable(Of DEM.Net.Lib.GeoPoint), DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  name.vb: GetLineGeometryElevation(IEnumerable(Of GeoPoint), DEMDataSet, InterpolationMode)
- uid: DEM.Net.Lib.ElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  commentId: M:DEM.Net.Lib.ElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  id: GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetPointElevation(FileMetadata, Double, Double, IInterpolator)
  nameWithType: ElevationService.GetPointElevation(FileMetadata, Double, Double, IInterpolator)
  fullName: DEM.Net.Lib.ElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata, System.Double, System.Double, DEM.Net.Lib.IInterpolator)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetPointElevation
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 229
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public float GetPointElevation(FileMetadata metadata, double lat, double lon, IInterpolator interpolator = null)
    parameters:
    - id: metadata
      type: DEM.Net.Lib.FileMetadata
    - id: lat
      type: System.Double
    - id: lon
      type: System.Double
    - id: interpolator
      type: DEM.Net.Lib.IInterpolator
    return:
      type: System.Single
    content.vb: Public Function GetPointElevation(metadata As FileMetadata, lat As Double, lon As Double, interpolator As IInterpolator = Nothing) As Single
  overload: DEM.Net.Lib.ElevationService.GetPointElevation*
  implements:
  - DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  commentId: M:DEM.Net.Lib.ElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  id: GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetPointElevation(IRasterFile, FileMetadata, Double, Double, IInterpolator)
  nameWithType: ElevationService.GetPointElevation(IRasterFile, FileMetadata, Double, Double, IInterpolator)
  fullName: DEM.Net.Lib.ElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile, DEM.Net.Lib.FileMetadata, System.Double, System.Double, DEM.Net.Lib.IInterpolator)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetPointElevation
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 245
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public float GetPointElevation(IRasterFile raster, FileMetadata metadata, double lat, double lon, IInterpolator interpolator = null)
    parameters:
    - id: raster
      type: DEM.Net.Lib.IRasterFile
    - id: metadata
      type: DEM.Net.Lib.FileMetadata
    - id: lat
      type: System.Double
    - id: lon
      type: System.Double
    - id: interpolator
      type: DEM.Net.Lib.IInterpolator
    return:
      type: System.Single
    content.vb: Public Function GetPointElevation(raster As IRasterFile, metadata As FileMetadata, lat As Double, lon As Double, interpolator As IInterpolator = Nothing) As Single
  overload: DEM.Net.Lib.ElevationService.GetPointElevation*
  implements:
  - DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
  commentId: M:DEM.Net.Lib.ElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
  id: GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetPointsElevation(IRasterFile, FileMetadata, IEnumerable<GeoPoint>, IInterpolator)
  nameWithType: ElevationService.GetPointsElevation(IRasterFile, FileMetadata, IEnumerable<GeoPoint>, IInterpolator)
  fullName: DEM.Net.Lib.ElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile, DEM.Net.Lib.FileMetadata, System.Collections.Generic.IEnumerable<DEM.Net.Lib.GeoPoint>, DEM.Net.Lib.IInterpolator)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetPointsElevation
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 307
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public float GetPointsElevation(IRasterFile raster, FileMetadata metadata, IEnumerable<GeoPoint> points, IInterpolator interpolator = null)
    parameters:
    - id: raster
      type: DEM.Net.Lib.IRasterFile
    - id: metadata
      type: DEM.Net.Lib.FileMetadata
    - id: points
      type: System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint}
    - id: interpolator
      type: DEM.Net.Lib.IInterpolator
    return:
      type: System.Single
    content.vb: Public Function GetPointsElevation(raster As IRasterFile, metadata As FileMetadata, points As IEnumerable(Of GeoPoint), interpolator As IInterpolator = Nothing) As Single
  overload: DEM.Net.Lib.ElevationService.GetPointsElevation*
  implements:
  - DEM.Net.Lib.IElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
  nameWithType.vb: ElevationService.GetPointsElevation(IRasterFile, FileMetadata, IEnumerable(Of GeoPoint), IInterpolator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DEM.Net.Lib.ElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile, DEM.Net.Lib.FileMetadata, System.Collections.Generic.IEnumerable(Of DEM.Net.Lib.GeoPoint), DEM.Net.Lib.IInterpolator)
  name.vb: GetPointsElevation(IRasterFile, FileMetadata, IEnumerable(Of GeoPoint), IInterpolator)
- uid: DEM.Net.Lib.ElevationService.GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.ElevationService.GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  id: GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetPointElevation(Double, Double, DEMDataSet, InterpolationMode)
  nameWithType: ElevationService.GetPointElevation(Double, Double, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.ElevationService.GetPointElevation(System.Double, System.Double, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetPointElevation
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 376
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public GeoPoint GetPointElevation(double lat, double lon, DEMDataSet dataSet, InterpolationMode interpolationMode = InterpolationMode.Bilinear)
    parameters:
    - id: lat
      type: System.Double
    - id: lon
      type: System.Double
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: interpolationMode
      type: DEM.Net.Lib.InterpolationMode
    return:
      type: DEM.Net.Lib.GeoPoint
    content.vb: Public Function GetPointElevation(lat As Double, lon As Double, dataSet As DEMDataSet, interpolationMode As InterpolationMode = InterpolationMode.Bilinear) As GeoPoint
  overload: DEM.Net.Lib.ElevationService.GetPointElevation*
  implements:
  - DEM.Net.Lib.IElevationService.GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.ElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  id: GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetPointsElevation(IEnumerable<GeoPoint>, DEMDataSet, InterpolationMode)
  nameWithType: ElevationService.GetPointsElevation(IEnumerable<GeoPoint>, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.ElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable<DEM.Net.Lib.GeoPoint>, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetPointsElevation
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 398
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public IEnumerable<GeoPoint> GetPointsElevation(IEnumerable<GeoPoint> points, DEMDataSet dataSet, InterpolationMode interpolationMode = InterpolationMode.Bilinear)
    parameters:
    - id: points
      type: System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint}
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: interpolationMode
      type: DEM.Net.Lib.InterpolationMode
    return:
      type: System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint}
    content.vb: Public Function GetPointsElevation(points As IEnumerable(Of GeoPoint), dataSet As DEMDataSet, interpolationMode As InterpolationMode = InterpolationMode.Bilinear) As IEnumerable(Of GeoPoint)
  overload: DEM.Net.Lib.ElevationService.GetPointsElevation*
  implements:
  - DEM.Net.Lib.IElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  nameWithType.vb: ElevationService.GetPointsElevation(IEnumerable(Of GeoPoint), DEMDataSet, InterpolationMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DEM.Net.Lib.ElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable(Of DEM.Net.Lib.GeoPoint), DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  name.vb: GetPointsElevation(IEnumerable(Of GeoPoint), DEMDataSet, InterpolationMode)
- uid: DEM.Net.Lib.ElevationService.GetInterpolator(DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.ElevationService.GetInterpolator(DEM.Net.Lib.InterpolationMode)
  id: GetInterpolator(DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetInterpolator(InterpolationMode)
  nameWithType: ElevationService.GetInterpolator(InterpolationMode)
  fullName: DEM.Net.Lib.ElevationService.GetInterpolator(DEM.Net.Lib.InterpolationMode)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetInterpolator
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 422
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public IInterpolator GetInterpolator(InterpolationMode interpolationMode)
    parameters:
    - id: interpolationMode
      type: DEM.Net.Lib.InterpolationMode
    return:
      type: DEM.Net.Lib.IInterpolator
    content.vb: Public Function GetInterpolator(interpolationMode As InterpolationMode) As IInterpolator
  overload: DEM.Net.Lib.ElevationService.GetInterpolator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
  commentId: M:DEM.Net.Lib.ElevationService.ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
  id: ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: ExportElevationTable(List<GeoPoint>)
  nameWithType: ElevationService.ExportElevationTable(List<GeoPoint>)
  fullName: DEM.Net.Lib.ElevationService.ExportElevationTable(System.Collections.Generic.List<DEM.Net.Lib.GeoPoint>)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: ExportElevationTable
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 435
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public string ExportElevationTable(List<GeoPoint> lineElevationData)
    parameters:
    - id: lineElevationData
      type: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
    return:
      type: System.String
    content.vb: Public Function ExportElevationTable(lineElevationData As List(Of GeoPoint)) As String
  overload: DEM.Net.Lib.ElevationService.ExportElevationTable*
  implements:
  - DEM.Net.Lib.IElevationService.ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
  nameWithType.vb: ElevationService.ExportElevationTable(List(Of GeoPoint))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DEM.Net.Lib.ElevationService.ExportElevationTable(System.Collections.Generic.List(Of DEM.Net.Lib.GeoPoint))
  name.vb: ExportElevationTable(List(Of GeoPoint))
- uid: DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
  commentId: M:DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
  id: GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetHeightMap(BoundingBox, DEMDataSet)
  nameWithType: ElevationService.GetHeightMap(BoundingBox, DEMDataSet)
  fullName: DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox, DEM.Net.Lib.DEMDataSet)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetHeightMap
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 447
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public HeightMap GetHeightMap(BoundingBox bbox, DEMDataSet dataSet)
    parameters:
    - id: bbox
      type: DEM.Net.Lib.BoundingBox
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    return:
      type: DEM.Net.Lib.HeightMap
    content.vb: Public Function GetHeightMap(bbox As BoundingBox, dataSet As DEMDataSet) As HeightMap
  overload: DEM.Net.Lib.ElevationService.GetHeightMap*
  implements:
  - DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
  commentId: M:DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
  id: GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetHeightMap(BoundingBox, String, DEMFileFormat)
  nameWithType: ElevationService.GetHeightMap(BoundingBox, String, DEMFileFormat)
  fullName: DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox, System.String, DEM.Net.Lib.DEMFileFormat)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetHeightMap
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 486
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public HeightMap GetHeightMap(BoundingBox bbox, string rasterFilePath, DEMFileFormat format)
    parameters:
    - id: bbox
      type: DEM.Net.Lib.BoundingBox
    - id: rasterFilePath
      type: System.String
    - id: format
      type: DEM.Net.Lib.DEMFileFormat
    return:
      type: DEM.Net.Lib.HeightMap
    content.vb: Public Function GetHeightMap(bbox As BoundingBox, rasterFilePath As String, format As DEMFileFormat) As HeightMap
  overload: DEM.Net.Lib.ElevationService.GetHeightMap*
  implements:
  - DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
  commentId: M:DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
  id: GetHeightMap(DEM.Net.Lib.FileMetadata)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetHeightMap(FileMetadata)
  nameWithType: ElevationService.GetHeightMap(FileMetadata)
  fullName: DEM.Net.Lib.ElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetHeightMap
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 497
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public HeightMap GetHeightMap(FileMetadata metadata)
    parameters:
    - id: metadata
      type: DEM.Net.Lib.FileMetadata
    return:
      type: DEM.Net.Lib.HeightMap
    content.vb: Public Function GetHeightMap(metadata As FileMetadata) As HeightMap
  overload: DEM.Net.Lib.ElevationService.GetHeightMap*
  implements:
  - DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.GetElevationData(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.RasterFileDictionary,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata},DEM.Net.Lib.IInterpolator)
  commentId: M:DEM.Net.Lib.ElevationService.GetElevationData(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.RasterFileDictionary,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata},DEM.Net.Lib.IInterpolator)
  id: GetElevationData(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.RasterFileDictionary,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata},DEM.Net.Lib.IInterpolator)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetElevationData(IEnumerable<GeoPoint>, DEMDataSet, RasterFileDictionary, List<FileMetadata>, IInterpolator)
  nameWithType: ElevationService.GetElevationData(IEnumerable<GeoPoint>, DEMDataSet, RasterFileDictionary, List<FileMetadata>, IInterpolator)
  fullName: DEM.Net.Lib.ElevationService.GetElevationData(System.Collections.Generic.IEnumerable<DEM.Net.Lib.GeoPoint>, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.RasterFileDictionary, System.Collections.Generic.List<DEM.Net.Lib.FileMetadata>, DEM.Net.Lib.IInterpolator)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetElevationData
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 513
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  summary: "\nFill altitudes for each GeoPoint provided, opening as few rasters as possible\n"
  example: []
  syntax:
    content: public IEnumerable<GeoPoint> GetElevationData(IEnumerable<GeoPoint> intersections, DEMDataSet dataSet, RasterFileDictionary adjacentRasters, List<FileMetadata> segTiles, IInterpolator interpolator)
    parameters:
    - id: intersections
      type: System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint}
      description: ''
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: adjacentRasters
      type: DEM.Net.Lib.RasterFileDictionary
    - id: segTiles
      type: System.Collections.Generic.List{DEM.Net.Lib.FileMetadata}
      description: ''
    - id: interpolator
      type: DEM.Net.Lib.IInterpolator
    return:
      type: System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint}
    content.vb: Public Function GetElevationData(intersections As IEnumerable(Of GeoPoint), dataSet As DEMDataSet, adjacentRasters As RasterFileDictionary, segTiles As List(Of FileMetadata), interpolator As IInterpolator) As IEnumerable(Of GeoPoint)
  overload: DEM.Net.Lib.ElevationService.GetElevationData*
  nameWithType.vb: ElevationService.GetElevationData(IEnumerable(Of GeoPoint), DEMDataSet, RasterFileDictionary, List(Of FileMetadata), IInterpolator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DEM.Net.Lib.ElevationService.GetElevationData(System.Collections.Generic.IEnumerable(Of DEM.Net.Lib.GeoPoint), DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.RasterFileDictionary, System.Collections.Generic.List(Of DEM.Net.Lib.FileMetadata), DEM.Net.Lib.IInterpolator)
  name.vb: GetElevationData(IEnumerable(Of GeoPoint), DEMDataSet, RasterFileDictionary, List(Of FileMetadata), IInterpolator)
- uid: DEM.Net.Lib.ElevationService.GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  commentId: M:DEM.Net.Lib.ElevationService.GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  id: GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetTilesBoundingBox(List<FileMetadata>)
  nameWithType: ElevationService.GetTilesBoundingBox(List<FileMetadata>)
  fullName: DEM.Net.Lib.ElevationService.GetTilesBoundingBox(System.Collections.Generic.List<DEM.Net.Lib.FileMetadata>)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetTilesBoundingBox
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 735
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public BoundingBox GetTilesBoundingBox(List<FileMetadata> tiles)
    parameters:
    - id: tiles
      type: System.Collections.Generic.List{DEM.Net.Lib.FileMetadata}
    return:
      type: DEM.Net.Lib.BoundingBox
    content.vb: Public Function GetTilesBoundingBox(tiles As List(Of FileMetadata)) As BoundingBox
  overload: DEM.Net.Lib.ElevationService.GetTilesBoundingBox*
  implements:
  - DEM.Net.Lib.IElevationService.GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  nameWithType.vb: ElevationService.GetTilesBoundingBox(List(Of FileMetadata))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DEM.Net.Lib.ElevationService.GetTilesBoundingBox(System.Collections.Generic.List(Of DEM.Net.Lib.FileMetadata))
  name.vb: GetTilesBoundingBox(List(Of FileMetadata))
- uid: DEM.Net.Lib.ElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  commentId: M:DEM.Net.Lib.ElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  id: GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetCoveringFiles(BoundingBox, DEMDataSet, List<FileMetadata>)
  nameWithType: ElevationService.GetCoveringFiles(BoundingBox, DEMDataSet, List<FileMetadata>)
  fullName: DEM.Net.Lib.ElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox, DEM.Net.Lib.DEMDataSet, System.Collections.Generic.List<DEM.Net.Lib.FileMetadata>)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetCoveringFiles
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 745
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public List<FileMetadata> GetCoveringFiles(BoundingBox bbox, DEMDataSet dataSet, List<FileMetadata> subSet = null)
    parameters:
    - id: bbox
      type: DEM.Net.Lib.BoundingBox
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: subSet
      type: System.Collections.Generic.List{DEM.Net.Lib.FileMetadata}
    return:
      type: System.Collections.Generic.List{DEM.Net.Lib.FileMetadata}
    content.vb: Public Function GetCoveringFiles(bbox As BoundingBox, dataSet As DEMDataSet, subSet As List(Of FileMetadata) = Nothing) As List(Of FileMetadata)
  overload: DEM.Net.Lib.ElevationService.GetCoveringFiles*
  implements:
  - DEM.Net.Lib.IElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  nameWithType.vb: ElevationService.GetCoveringFiles(BoundingBox, DEMDataSet, List(Of FileMetadata))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DEM.Net.Lib.ElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox, DEM.Net.Lib.DEMDataSet, System.Collections.Generic.List(Of DEM.Net.Lib.FileMetadata))
  name.vb: GetCoveringFiles(BoundingBox, DEMDataSet, List(Of FileMetadata))
- uid: DEM.Net.Lib.ElevationService.GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  commentId: M:DEM.Net.Lib.ElevationService.GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  id: GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: GetCoveringFiles(Double, Double, DEMDataSet, List<FileMetadata>)
  nameWithType: ElevationService.GetCoveringFiles(Double, Double, DEMDataSet, List<FileMetadata>)
  fullName: DEM.Net.Lib.ElevationService.GetCoveringFiles(System.Double, System.Double, DEM.Net.Lib.DEMDataSet, System.Collections.Generic.List<DEM.Net.Lib.FileMetadata>)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: GetCoveringFiles
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 763
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public List<FileMetadata> GetCoveringFiles(double lat, double lon, DEMDataSet dataSet, List<FileMetadata> subSet = null)
    parameters:
    - id: lat
      type: System.Double
    - id: lon
      type: System.Double
    - id: dataSet
      type: DEM.Net.Lib.DEMDataSet
    - id: subSet
      type: System.Collections.Generic.List{DEM.Net.Lib.FileMetadata}
    return:
      type: System.Collections.Generic.List{DEM.Net.Lib.FileMetadata}
    content.vb: Public Function GetCoveringFiles(lat As Double, lon As Double, dataSet As DEMDataSet, subSet As List(Of FileMetadata) = Nothing) As List(Of FileMetadata)
  overload: DEM.Net.Lib.ElevationService.GetCoveringFiles*
  implements:
  - DEM.Net.Lib.IElevationService.GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  nameWithType.vb: ElevationService.GetCoveringFiles(Double, Double, DEMDataSet, List(Of FileMetadata))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DEM.Net.Lib.ElevationService.GetCoveringFiles(System.Double, System.Double, DEM.Net.Lib.DEMDataSet, System.Collections.Generic.List(Of DEM.Net.Lib.FileMetadata))
  name.vb: GetCoveringFiles(Double, Double, DEMDataSet, List(Of FileMetadata))
- uid: DEM.Net.Lib.ElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
  commentId: M:DEM.Net.Lib.ElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
  id: IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: IsBboxIntersectingTile(FileMetadata, BoundingBox)
  nameWithType: ElevationService.IsBboxIntersectingTile(FileMetadata, BoundingBox)
  fullName: DEM.Net.Lib.ElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata, DEM.Net.Lib.BoundingBox)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: IsBboxIntersectingTile
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 783
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public bool IsBboxIntersectingTile(FileMetadata tileMetadata, BoundingBox bbox)
    parameters:
    - id: tileMetadata
      type: DEM.Net.Lib.FileMetadata
    - id: bbox
      type: DEM.Net.Lib.BoundingBox
    return:
      type: System.Boolean
    content.vb: Public Function IsBboxIntersectingTile(tileMetadata As FileMetadata, bbox As BoundingBox) As Boolean
  overload: DEM.Net.Lib.ElevationService.IsBboxIntersectingTile*
  implements:
  - DEM.Net.Lib.IElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
  commentId: M:DEM.Net.Lib.ElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
  id: IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: IsPointInTile(FileMetadata, GeoPoint)
  nameWithType: ElevationService.IsPointInTile(FileMetadata, GeoPoint)
  fullName: DEM.Net.Lib.ElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata, DEM.Net.Lib.GeoPoint)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: IsPointInTile
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 789
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public bool IsPointInTile(FileMetadata tileMetadata, GeoPoint point)
    parameters:
    - id: tileMetadata
      type: DEM.Net.Lib.FileMetadata
    - id: point
      type: DEM.Net.Lib.GeoPoint
    return:
      type: System.Boolean
    content.vb: Public Function IsPointInTile(tileMetadata As FileMetadata, point As GeoPoint) As Boolean
  overload: DEM.Net.Lib.ElevationService.IsPointInTile*
  implements:
  - DEM.Net.Lib.IElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DEM.Net.Lib.ElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,System.Double,System.Double)
  commentId: M:DEM.Net.Lib.ElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,System.Double,System.Double)
  id: IsPointInTile(DEM.Net.Lib.FileMetadata,System.Double,System.Double)
  parent: DEM.Net.Lib.ElevationService
  langs:
  - csharp
  - vb
  name: IsPointInTile(FileMetadata, Double, Double)
  nameWithType: ElevationService.IsPointInTile(FileMetadata, Double, Double)
  fullName: DEM.Net.Lib.ElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/Elevation/ElevationService.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: IsPointInTile
    path: ../DEM.Net.Lib/Services/Elevation/ElevationService.cs
    startLine: 793
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public bool IsPointInTile(FileMetadata tileMetadata, double lat, double lon)
    parameters:
    - id: tileMetadata
      type: DEM.Net.Lib.FileMetadata
    - id: lat
      type: System.Double
    - id: lon
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Function IsPointInTile(tileMetadata As FileMetadata, lat As Double, lon As Double) As Boolean
  overload: DEM.Net.Lib.ElevationService.IsPointInTile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DEM.Net.Lib
  commentId: N:DEM.Net.Lib
  name: DEM.Net.Lib
  nameWithType: DEM.Net.Lib
  fullName: DEM.Net.Lib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DEM.Net.Lib.IElevationService
  commentId: T:DEM.Net.Lib.IElevationService
  parent: DEM.Net.Lib
  name: IElevationService
  nameWithType: IElevationService
  fullName: DEM.Net.Lib.IElevationService
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: DEM.Net.Lib.ElevationService.#ctor*
  commentId: Overload:DEM.Net.Lib.ElevationService.#ctor
  name: ElevationService
  nameWithType: ElevationService.ElevationService
  fullName: DEM.Net.Lib.ElevationService.ElevationService
- uid: DEM.Net.Lib.IRasterService
  commentId: T:DEM.Net.Lib.IRasterService
  parent: DEM.Net.Lib
  name: IRasterService
  nameWithType: IRasterService
  fullName: DEM.Net.Lib.IRasterService
- uid: DEM.Net.Lib.ElevationService.GetDEMLocalPath*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetDEMLocalPath
  name: GetDEMLocalPath
  nameWithType: ElevationService.GetDEMLocalPath
  fullName: DEM.Net.Lib.ElevationService.GetDEMLocalPath
- uid: DEM.Net.Lib.IElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  commentId: M:DEM.Net.Lib.IElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  parent: DEM.Net.Lib.IElevationService
  name: GetDEMLocalPath(DEMDataSet)
  nameWithType: IElevationService.GetDEMLocalPath(DEMDataSet)
  fullName: DEM.Net.Lib.IElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
    name: GetDEMLocalPath
    nameWithType: IElevationService.GetDEMLocalPath
    fullName: DEM.Net.Lib.IElevationService.GetDEMLocalPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetDEMLocalPath(DEM.Net.Lib.DEMDataSet)
    name: GetDEMLocalPath
    nameWithType: IElevationService.GetDEMLocalPath
    fullName: DEM.Net.Lib.IElevationService.GetDEMLocalPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.DEMDataSet
  commentId: T:DEM.Net.Lib.DEMDataSet
  parent: DEM.Net.Lib
  name: DEMDataSet
  nameWithType: DEMDataSet
  fullName: DEM.Net.Lib.DEMDataSet
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DEM.Net.Lib.ElevationService.DownloadMissingFiles*
  commentId: Overload:DEM.Net.Lib.ElevationService.DownloadMissingFiles
  name: DownloadMissingFiles
  nameWithType: ElevationService.DownloadMissingFiles
  fullName: DEM.Net.Lib.ElevationService.DownloadMissingFiles
- uid: DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
  commentId: M:DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
  parent: DEM.Net.Lib.IElevationService
  name: DownloadMissingFiles(DEMDataSet, BoundingBox)
  nameWithType: IElevationService.DownloadMissingFiles(DEMDataSet, BoundingBox)
  fullName: DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.BoundingBox)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
    name: DownloadMissingFiles
    nameWithType: IElevationService.DownloadMissingFiles
    fullName: DEM.Net.Lib.IElevationService.DownloadMissingFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.BoundingBox)
    name: DownloadMissingFiles
    nameWithType: IElevationService.DownloadMissingFiles
    fullName: DEM.Net.Lib.IElevationService.DownloadMissingFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.BoundingBox
  commentId: T:DEM.Net.Lib.BoundingBox
  parent: DEM.Net.Lib
  name: BoundingBox
  nameWithType: BoundingBox
  fullName: DEM.Net.Lib.BoundingBox
- uid: DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
  commentId: M:DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: DownloadMissingFiles(DEMDataSet, Double, Double)
  nameWithType: IElevationService.DownloadMissingFiles(DEMDataSet, Double, Double)
  fullName: DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet, System.Double, System.Double)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
    name: DownloadMissingFiles
    nameWithType: IElevationService.DownloadMissingFiles
    fullName: DEM.Net.Lib.IElevationService.DownloadMissingFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.DownloadMissingFiles(DEM.Net.Lib.DEMDataSet,System.Double,System.Double)
    name: DownloadMissingFiles
    nameWithType: IElevationService.DownloadMissingFiles
    fullName: DEM.Net.Lib.IElevationService.DownloadMissingFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: DEM.Net.Lib.ElevationService.GetLineGeometryElevation*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetLineGeometryElevation
  name: GetLineGeometryElevation
  nameWithType: ElevationService.GetLineGeometryElevation
  fullName: DEM.Net.Lib.ElevationService.GetLineGeometryElevation
- uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetLineGeometryElevation(String, DEMDataSet, InterpolationMode)
  nameWithType: IElevationService.GetLineGeometryElevation(String, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.String, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetLineGeometryElevation
    nameWithType: IElevationService.GetLineGeometryElevation
    fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.String,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetLineGeometryElevation
    nameWithType: IElevationService.GetLineGeometryElevation
    fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.InterpolationMode
  commentId: T:DEM.Net.Lib.InterpolationMode
  parent: DEM.Net.Lib
  name: InterpolationMode
  nameWithType: InterpolationMode
  fullName: DEM.Net.Lib.InterpolationMode
- uid: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
  commentId: T:System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<GeoPoint>
  nameWithType: List<GeoPoint>
  fullName: System.Collections.Generic.List<DEM.Net.Lib.GeoPoint>
  nameWithType.vb: List(Of GeoPoint)
  fullName.vb: System.Collections.Generic.List(Of DEM.Net.Lib.GeoPoint)
  name.vb: List(Of GeoPoint)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.IElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetLineGeometryElevation(IGeometry, DEMDataSet, InterpolationMode)
  nameWithType: IElevationService.GetLineGeometryElevation(IGeometry, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetLineGeometryElevation
    nameWithType: IElevationService.GetLineGeometryElevation
    fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeoAPI.Geometries.IGeometry
    name: IGeometry
    nameWithType: IGeometry
    fullName: GeoAPI.Geometries.IGeometry
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(GeoAPI.Geometries.IGeometry,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetLineGeometryElevation
    nameWithType: IElevationService.GetLineGeometryElevation
    fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeoAPI.Geometries.IGeometry
    name: IGeometry
    nameWithType: IGeometry
    fullName: GeoAPI.Geometries.IGeometry
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: GeoAPI.Geometries.IGeometry
  commentId: T:GeoAPI.Geometries.IGeometry
  parent: GeoAPI.Geometries
  isExternal: true
  name: IGeometry
  nameWithType: IGeometry
  fullName: GeoAPI.Geometries.IGeometry
- uid: GeoAPI.Geometries
  commentId: N:GeoAPI.Geometries
  isExternal: true
  name: GeoAPI.Geometries
  nameWithType: GeoAPI.Geometries
  fullName: GeoAPI.Geometries
- uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetLineGeometryElevation(IEnumerable<GeoPoint>, DEMDataSet, InterpolationMode)
  nameWithType: IElevationService.GetLineGeometryElevation(IEnumerable<GeoPoint>, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable<DEM.Net.Lib.GeoPoint>, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  nameWithType.vb: IElevationService.GetLineGeometryElevation(IEnumerable(Of GeoPoint), DEMDataSet, InterpolationMode)
  fullName.vb: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable(Of DEM.Net.Lib.GeoPoint), DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  name.vb: GetLineGeometryElevation(IEnumerable(Of GeoPoint), DEMDataSet, InterpolationMode)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetLineGeometryElevation
    nameWithType: IElevationService.GetLineGeometryElevation
    fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetLineGeometryElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetLineGeometryElevation
    nameWithType: IElevationService.GetLineGeometryElevation
    fullName: DEM.Net.Lib.IElevationService.GetLineGeometryElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint}
  commentId: T:System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<GeoPoint>
  nameWithType: IEnumerable<GeoPoint>
  fullName: System.Collections.Generic.IEnumerable<DEM.Net.Lib.GeoPoint>
  nameWithType.vb: IEnumerable(Of GeoPoint)
  fullName.vb: System.Collections.Generic.IEnumerable(Of DEM.Net.Lib.GeoPoint)
  name.vb: IEnumerable(Of GeoPoint)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.ElevationService.GetPointElevation*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetPointElevation
  name: GetPointElevation
  nameWithType: ElevationService.GetPointElevation
  fullName: DEM.Net.Lib.ElevationService.GetPointElevation
- uid: DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  commentId: M:DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetPointElevation(FileMetadata, Double, Double, IInterpolator)
  nameWithType: IElevationService.GetPointElevation(FileMetadata, Double, Double, IInterpolator)
  fullName: DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata, System.Double, System.Double, DEM.Net.Lib.IInterpolator)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
    name: GetPointElevation
    nameWithType: IElevationService.GetPointElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.IInterpolator
    name: IInterpolator
    nameWithType: IInterpolator
    fullName: DEM.Net.Lib.IInterpolator
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
    name: GetPointElevation
    nameWithType: IElevationService.GetPointElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.IInterpolator
    name: IInterpolator
    nameWithType: IInterpolator
    fullName: DEM.Net.Lib.IInterpolator
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.FileMetadata
  commentId: T:DEM.Net.Lib.FileMetadata
  parent: DEM.Net.Lib
  name: FileMetadata
  nameWithType: FileMetadata
  fullName: DEM.Net.Lib.FileMetadata
- uid: DEM.Net.Lib.IInterpolator
  commentId: T:DEM.Net.Lib.IInterpolator
  parent: DEM.Net.Lib
  name: IInterpolator
  nameWithType: IInterpolator
  fullName: DEM.Net.Lib.IInterpolator
- uid: DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  commentId: M:DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetPointElevation(IRasterFile, FileMetadata, Double, Double, IInterpolator)
  nameWithType: IElevationService.GetPointElevation(IRasterFile, FileMetadata, Double, Double, IInterpolator)
  fullName: DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile, DEM.Net.Lib.FileMetadata, System.Double, System.Double, DEM.Net.Lib.IInterpolator)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
    name: GetPointElevation
    nameWithType: IElevationService.GetPointElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.IRasterFile
    name: IRasterFile
    nameWithType: IRasterFile
    fullName: DEM.Net.Lib.IRasterFile
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.IInterpolator
    name: IInterpolator
    nameWithType: IInterpolator
    fullName: DEM.Net.Lib.IInterpolator
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetPointElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Double,System.Double,DEM.Net.Lib.IInterpolator)
    name: GetPointElevation
    nameWithType: IElevationService.GetPointElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.IRasterFile
    name: IRasterFile
    nameWithType: IRasterFile
    fullName: DEM.Net.Lib.IRasterFile
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.IInterpolator
    name: IInterpolator
    nameWithType: IInterpolator
    fullName: DEM.Net.Lib.IInterpolator
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.IRasterFile
  commentId: T:DEM.Net.Lib.IRasterFile
  parent: DEM.Net.Lib
  name: IRasterFile
  nameWithType: IRasterFile
  fullName: DEM.Net.Lib.IRasterFile
- uid: DEM.Net.Lib.ElevationService.GetPointsElevation*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetPointsElevation
  name: GetPointsElevation
  nameWithType: ElevationService.GetPointsElevation
  fullName: DEM.Net.Lib.ElevationService.GetPointsElevation
- uid: DEM.Net.Lib.IElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
  commentId: M:DEM.Net.Lib.IElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetPointsElevation(IRasterFile, FileMetadata, IEnumerable<GeoPoint>, IInterpolator)
  nameWithType: IElevationService.GetPointsElevation(IRasterFile, FileMetadata, IEnumerable<GeoPoint>, IInterpolator)
  fullName: DEM.Net.Lib.IElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile, DEM.Net.Lib.FileMetadata, System.Collections.Generic.IEnumerable<DEM.Net.Lib.GeoPoint>, DEM.Net.Lib.IInterpolator)
  nameWithType.vb: IElevationService.GetPointsElevation(IRasterFile, FileMetadata, IEnumerable(Of GeoPoint), IInterpolator)
  fullName.vb: DEM.Net.Lib.IElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile, DEM.Net.Lib.FileMetadata, System.Collections.Generic.IEnumerable(Of DEM.Net.Lib.GeoPoint), DEM.Net.Lib.IInterpolator)
  name.vb: GetPointsElevation(IRasterFile, FileMetadata, IEnumerable(Of GeoPoint), IInterpolator)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
    name: GetPointsElevation
    nameWithType: IElevationService.GetPointsElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointsElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.IRasterFile
    name: IRasterFile
    nameWithType: IRasterFile
    fullName: DEM.Net.Lib.IRasterFile
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.IInterpolator
    name: IInterpolator
    nameWithType: IInterpolator
    fullName: DEM.Net.Lib.IInterpolator
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetPointsElevation(DEM.Net.Lib.IRasterFile,DEM.Net.Lib.FileMetadata,System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.IInterpolator)
    name: GetPointsElevation
    nameWithType: IElevationService.GetPointsElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointsElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.IRasterFile
    name: IRasterFile
    nameWithType: IRasterFile
    fullName: DEM.Net.Lib.IRasterFile
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.IInterpolator
    name: IInterpolator
    nameWithType: IInterpolator
    fullName: DEM.Net.Lib.IInterpolator
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.IElevationService.GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.IElevationService.GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetPointElevation(Double, Double, DEMDataSet, InterpolationMode)
  nameWithType: IElevationService.GetPointElevation(Double, Double, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.IElevationService.GetPointElevation(System.Double, System.Double, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetPointElevation
    nameWithType: IElevationService.GetPointElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetPointElevation(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetPointElevation
    nameWithType: IElevationService.GetPointElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.GeoPoint
  commentId: T:DEM.Net.Lib.GeoPoint
  parent: DEM.Net.Lib
  name: GeoPoint
  nameWithType: GeoPoint
  fullName: DEM.Net.Lib.GeoPoint
- uid: DEM.Net.Lib.IElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  commentId: M:DEM.Net.Lib.IElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetPointsElevation(IEnumerable<GeoPoint>, DEMDataSet, InterpolationMode)
  nameWithType: IElevationService.GetPointsElevation(IEnumerable<GeoPoint>, DEMDataSet, InterpolationMode)
  fullName: DEM.Net.Lib.IElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable<DEM.Net.Lib.GeoPoint>, DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  nameWithType.vb: IElevationService.GetPointsElevation(IEnumerable(Of GeoPoint), DEMDataSet, InterpolationMode)
  fullName.vb: DEM.Net.Lib.IElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable(Of DEM.Net.Lib.GeoPoint), DEM.Net.Lib.DEMDataSet, DEM.Net.Lib.InterpolationMode)
  name.vb: GetPointsElevation(IEnumerable(Of GeoPoint), DEMDataSet, InterpolationMode)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetPointsElevation
    nameWithType: IElevationService.GetPointsElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointsElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetPointsElevation(System.Collections.Generic.IEnumerable{DEM.Net.Lib.GeoPoint},DEM.Net.Lib.DEMDataSet,DEM.Net.Lib.InterpolationMode)
    name: GetPointsElevation
    nameWithType: IElevationService.GetPointsElevation
    fullName: DEM.Net.Lib.IElevationService.GetPointsElevation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.InterpolationMode
    name: InterpolationMode
    nameWithType: InterpolationMode
    fullName: DEM.Net.Lib.InterpolationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.ElevationService.GetInterpolator*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetInterpolator
  name: GetInterpolator
  nameWithType: ElevationService.GetInterpolator
  fullName: DEM.Net.Lib.ElevationService.GetInterpolator
- uid: DEM.Net.Lib.ElevationService.ExportElevationTable*
  commentId: Overload:DEM.Net.Lib.ElevationService.ExportElevationTable
  name: ExportElevationTable
  nameWithType: ElevationService.ExportElevationTable
  fullName: DEM.Net.Lib.ElevationService.ExportElevationTable
- uid: DEM.Net.Lib.IElevationService.ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
  commentId: M:DEM.Net.Lib.IElevationService.ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: ExportElevationTable(List<GeoPoint>)
  nameWithType: IElevationService.ExportElevationTable(List<GeoPoint>)
  fullName: DEM.Net.Lib.IElevationService.ExportElevationTable(System.Collections.Generic.List<DEM.Net.Lib.GeoPoint>)
  nameWithType.vb: IElevationService.ExportElevationTable(List(Of GeoPoint))
  fullName.vb: DEM.Net.Lib.IElevationService.ExportElevationTable(System.Collections.Generic.List(Of DEM.Net.Lib.GeoPoint))
  name.vb: ExportElevationTable(List(Of GeoPoint))
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
    name: ExportElevationTable
    nameWithType: IElevationService.ExportElevationTable
    fullName: DEM.Net.Lib.IElevationService.ExportElevationTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.ExportElevationTable(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint})
    name: ExportElevationTable
    nameWithType: IElevationService.ExportElevationTable
    fullName: DEM.Net.Lib.IElevationService.ExportElevationTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.ElevationService.GetHeightMap*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetHeightMap
  name: GetHeightMap
  nameWithType: ElevationService.GetHeightMap
  fullName: DEM.Net.Lib.ElevationService.GetHeightMap
- uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
  commentId: M:DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
  parent: DEM.Net.Lib.IElevationService
  name: GetHeightMap(BoundingBox, DEMDataSet)
  nameWithType: IElevationService.GetHeightMap(BoundingBox, DEMDataSet)
  fullName: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox, DEM.Net.Lib.DEMDataSet)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
    name: GetHeightMap
    nameWithType: IElevationService.GetHeightMap
    fullName: DEM.Net.Lib.IElevationService.GetHeightMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet)
    name: GetHeightMap
    nameWithType: IElevationService.GetHeightMap
    fullName: DEM.Net.Lib.IElevationService.GetHeightMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.HeightMap
  commentId: T:DEM.Net.Lib.HeightMap
  parent: DEM.Net.Lib
  name: HeightMap
  nameWithType: HeightMap
  fullName: DEM.Net.Lib.HeightMap
- uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
  commentId: M:DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetHeightMap(BoundingBox, String, DEMFileFormat)
  nameWithType: IElevationService.GetHeightMap(BoundingBox, String, DEMFileFormat)
  fullName: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox, System.String, DEM.Net.Lib.DEMFileFormat)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
    name: GetHeightMap
    nameWithType: IElevationService.GetHeightMap
    fullName: DEM.Net.Lib.IElevationService.GetHeightMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMFileFormat
    name: DEMFileFormat
    nameWithType: DEMFileFormat
    fullName: DEM.Net.Lib.DEMFileFormat
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.BoundingBox,System.String,DEM.Net.Lib.DEMFileFormat)
    name: GetHeightMap
    nameWithType: IElevationService.GetHeightMap
    fullName: DEM.Net.Lib.IElevationService.GetHeightMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMFileFormat
    name: DEMFileFormat
    nameWithType: DEMFileFormat
    fullName: DEM.Net.Lib.DEMFileFormat
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.DEMFileFormat
  commentId: T:DEM.Net.Lib.DEMFileFormat
  parent: DEM.Net.Lib
  name: DEMFileFormat
  nameWithType: DEMFileFormat
  fullName: DEM.Net.Lib.DEMFileFormat
- uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
  commentId: M:DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
  parent: DEM.Net.Lib.IElevationService
  name: GetHeightMap(FileMetadata)
  nameWithType: IElevationService.GetHeightMap(FileMetadata)
  fullName: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
    name: GetHeightMap
    nameWithType: IElevationService.GetHeightMap
    fullName: DEM.Net.Lib.IElevationService.GetHeightMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetHeightMap(DEM.Net.Lib.FileMetadata)
    name: GetHeightMap
    nameWithType: IElevationService.GetHeightMap
    fullName: DEM.Net.Lib.IElevationService.GetHeightMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.ElevationService.GetElevationData*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetElevationData
  name: GetElevationData
  nameWithType: ElevationService.GetElevationData
  fullName: DEM.Net.Lib.ElevationService.GetElevationData
- uid: DEM.Net.Lib.RasterFileDictionary
  commentId: T:DEM.Net.Lib.RasterFileDictionary
  parent: DEM.Net.Lib
  name: RasterFileDictionary
  nameWithType: RasterFileDictionary
  fullName: DEM.Net.Lib.RasterFileDictionary
- uid: System.Collections.Generic.List{DEM.Net.Lib.FileMetadata}
  commentId: T:System.Collections.Generic.List{DEM.Net.Lib.FileMetadata}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<FileMetadata>
  nameWithType: List<FileMetadata>
  fullName: System.Collections.Generic.List<DEM.Net.Lib.FileMetadata>
  nameWithType.vb: List(Of FileMetadata)
  fullName.vb: System.Collections.Generic.List(Of DEM.Net.Lib.FileMetadata)
  name.vb: List(Of FileMetadata)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.ElevationService.GetTilesBoundingBox*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetTilesBoundingBox
  name: GetTilesBoundingBox
  nameWithType: ElevationService.GetTilesBoundingBox
  fullName: DEM.Net.Lib.ElevationService.GetTilesBoundingBox
- uid: DEM.Net.Lib.IElevationService.GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  commentId: M:DEM.Net.Lib.IElevationService.GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetTilesBoundingBox(List<FileMetadata>)
  nameWithType: IElevationService.GetTilesBoundingBox(List<FileMetadata>)
  fullName: DEM.Net.Lib.IElevationService.GetTilesBoundingBox(System.Collections.Generic.List<DEM.Net.Lib.FileMetadata>)
  nameWithType.vb: IElevationService.GetTilesBoundingBox(List(Of FileMetadata))
  fullName.vb: DEM.Net.Lib.IElevationService.GetTilesBoundingBox(System.Collections.Generic.List(Of DEM.Net.Lib.FileMetadata))
  name.vb: GetTilesBoundingBox(List(Of FileMetadata))
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
    name: GetTilesBoundingBox
    nameWithType: IElevationService.GetTilesBoundingBox
    fullName: DEM.Net.Lib.IElevationService.GetTilesBoundingBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetTilesBoundingBox(System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
    name: GetTilesBoundingBox
    nameWithType: IElevationService.GetTilesBoundingBox
    fullName: DEM.Net.Lib.IElevationService.GetTilesBoundingBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.ElevationService.GetCoveringFiles*
  commentId: Overload:DEM.Net.Lib.ElevationService.GetCoveringFiles
  name: GetCoveringFiles
  nameWithType: ElevationService.GetCoveringFiles
  fullName: DEM.Net.Lib.ElevationService.GetCoveringFiles
- uid: DEM.Net.Lib.IElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  commentId: M:DEM.Net.Lib.IElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetCoveringFiles(BoundingBox, DEMDataSet, List<FileMetadata>)
  nameWithType: IElevationService.GetCoveringFiles(BoundingBox, DEMDataSet, List<FileMetadata>)
  fullName: DEM.Net.Lib.IElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox, DEM.Net.Lib.DEMDataSet, System.Collections.Generic.List<DEM.Net.Lib.FileMetadata>)
  nameWithType.vb: IElevationService.GetCoveringFiles(BoundingBox, DEMDataSet, List(Of FileMetadata))
  fullName.vb: DEM.Net.Lib.IElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox, DEM.Net.Lib.DEMDataSet, System.Collections.Generic.List(Of DEM.Net.Lib.FileMetadata))
  name.vb: GetCoveringFiles(BoundingBox, DEMDataSet, List(Of FileMetadata))
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
    name: GetCoveringFiles
    nameWithType: IElevationService.GetCoveringFiles
    fullName: DEM.Net.Lib.IElevationService.GetCoveringFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetCoveringFiles(DEM.Net.Lib.BoundingBox,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
    name: GetCoveringFiles
    nameWithType: IElevationService.GetCoveringFiles
    fullName: DEM.Net.Lib.IElevationService.GetCoveringFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.IElevationService.GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  commentId: M:DEM.Net.Lib.IElevationService.GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
  parent: DEM.Net.Lib.IElevationService
  isExternal: true
  name: GetCoveringFiles(Double, Double, DEMDataSet, List<FileMetadata>)
  nameWithType: IElevationService.GetCoveringFiles(Double, Double, DEMDataSet, List<FileMetadata>)
  fullName: DEM.Net.Lib.IElevationService.GetCoveringFiles(System.Double, System.Double, DEM.Net.Lib.DEMDataSet, System.Collections.Generic.List<DEM.Net.Lib.FileMetadata>)
  nameWithType.vb: IElevationService.GetCoveringFiles(Double, Double, DEMDataSet, List(Of FileMetadata))
  fullName.vb: DEM.Net.Lib.IElevationService.GetCoveringFiles(System.Double, System.Double, DEM.Net.Lib.DEMDataSet, System.Collections.Generic.List(Of DEM.Net.Lib.FileMetadata))
  name.vb: GetCoveringFiles(Double, Double, DEMDataSet, List(Of FileMetadata))
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
    name: GetCoveringFiles
    nameWithType: IElevationService.GetCoveringFiles
    fullName: DEM.Net.Lib.IElevationService.GetCoveringFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.GetCoveringFiles(System.Double,System.Double,DEM.Net.Lib.DEMDataSet,System.Collections.Generic.List{DEM.Net.Lib.FileMetadata})
    name: GetCoveringFiles
    nameWithType: IElevationService.GetCoveringFiles
    fullName: DEM.Net.Lib.IElevationService.GetCoveringFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.DEMDataSet
    name: DEMDataSet
    nameWithType: DEMDataSet
    fullName: DEM.Net.Lib.DEMDataSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DEM.Net.Lib.ElevationService.IsBboxIntersectingTile*
  commentId: Overload:DEM.Net.Lib.ElevationService.IsBboxIntersectingTile
  name: IsBboxIntersectingTile
  nameWithType: ElevationService.IsBboxIntersectingTile
  fullName: DEM.Net.Lib.ElevationService.IsBboxIntersectingTile
- uid: DEM.Net.Lib.IElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
  commentId: M:DEM.Net.Lib.IElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
  parent: DEM.Net.Lib.IElevationService
  name: IsBboxIntersectingTile(FileMetadata, BoundingBox)
  nameWithType: IElevationService.IsBboxIntersectingTile(FileMetadata, BoundingBox)
  fullName: DEM.Net.Lib.IElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata, DEM.Net.Lib.BoundingBox)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
    name: IsBboxIntersectingTile
    nameWithType: IElevationService.IsBboxIntersectingTile
    fullName: DEM.Net.Lib.IElevationService.IsBboxIntersectingTile
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.IsBboxIntersectingTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.BoundingBox)
    name: IsBboxIntersectingTile
    nameWithType: IElevationService.IsBboxIntersectingTile
    fullName: DEM.Net.Lib.IElevationService.IsBboxIntersectingTile
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.BoundingBox
    name: BoundingBox
    nameWithType: BoundingBox
    fullName: DEM.Net.Lib.BoundingBox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DEM.Net.Lib.ElevationService.IsPointInTile*
  commentId: Overload:DEM.Net.Lib.ElevationService.IsPointInTile
  name: IsPointInTile
  nameWithType: ElevationService.IsPointInTile
  fullName: DEM.Net.Lib.ElevationService.IsPointInTile
- uid: DEM.Net.Lib.IElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
  commentId: M:DEM.Net.Lib.IElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
  parent: DEM.Net.Lib.IElevationService
  name: IsPointInTile(FileMetadata, GeoPoint)
  nameWithType: IElevationService.IsPointInTile(FileMetadata, GeoPoint)
  fullName: DEM.Net.Lib.IElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata, DEM.Net.Lib.GeoPoint)
  spec.csharp:
  - uid: DEM.Net.Lib.IElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
    name: IsPointInTile
    nameWithType: IElevationService.IsPointInTile
    fullName: DEM.Net.Lib.IElevationService.IsPointInTile
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DEM.Net.Lib.IElevationService.IsPointInTile(DEM.Net.Lib.FileMetadata,DEM.Net.Lib.GeoPoint)
    name: IsPointInTile
    nameWithType: IElevationService.IsPointInTile
    fullName: DEM.Net.Lib.IElevationService.IsPointInTile
  - name: (
    nameWithType: (
    fullName: (
  - uid: DEM.Net.Lib.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: DEM.Net.Lib.FileMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
