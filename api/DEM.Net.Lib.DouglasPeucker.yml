### YamlMime:ManagedReference
items:
- uid: DEM.Net.Lib.DouglasPeucker
  commentId: T:DEM.Net.Lib.DouglasPeucker
  id: DouglasPeucker
  parent: DEM.Net.Lib
  children:
  - DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Double)
  - DEM.Net.Lib.DouglasPeucker.PerpendicularDistance(DEM.Net.Lib.GeoPoint,DEM.Net.Lib.GeoPoint,DEM.Net.Lib.GeoPoint)
  langs:
  - csharp
  - vb
  name: DouglasPeucker
  nameWithType: DouglasPeucker
  fullName: DEM.Net.Lib.DouglasPeucker
  type: Class
  source:
    remote:
      path: DEM.Net.Lib/Services/DouglasPeuckerReduction.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: DouglasPeucker
    path: ../DEM.Net.Lib/Services/DouglasPeuckerReduction.cs
    startLine: 11
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  syntax:
    content: public static class DouglasPeucker
    content.vb: Public Module DouglasPeucker
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Double)
  commentId: M:DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Double)
  id: DouglasPeuckerReduction(System.Collections.Generic.List{DEM.Net.Lib.GeoPoint},System.Double)
  parent: DEM.Net.Lib.DouglasPeucker
  langs:
  - csharp
  - vb
  name: DouglasPeuckerReduction(List<GeoPoint>, Double)
  nameWithType: DouglasPeucker.DouglasPeuckerReduction(List<GeoPoint>, Double)
  fullName: DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction(System.Collections.Generic.List<DEM.Net.Lib.GeoPoint>, System.Double)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/DouglasPeuckerReduction.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: DouglasPeuckerReduction
    path: ../DEM.Net.Lib/Services/DouglasPeuckerReduction.cs
    startLine: 19
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  summary: "\nUses the Douglas Peucker algorithim to reduce the number of points.\n"
  example: []
  syntax:
    content: public static List<GeoPoint> DouglasPeuckerReduction(List<GeoPoint> Points, double Tolerance)
    parameters:
    - id: Points
      type: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
      description: The points.
    - id: Tolerance
      type: System.Double
      description: The tolerance.
    return:
      type: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
      description: ''
    content.vb: Public Shared Function DouglasPeuckerReduction(Points As List(Of GeoPoint), Tolerance As Double) As List(Of GeoPoint)
  overload: DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction*
  nameWithType.vb: DouglasPeucker.DouglasPeuckerReduction(List(Of GeoPoint), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction(System.Collections.Generic.List(Of DEM.Net.Lib.GeoPoint), System.Double)
  name.vb: DouglasPeuckerReduction(List(Of GeoPoint), Double)
- uid: DEM.Net.Lib.DouglasPeucker.PerpendicularDistance(DEM.Net.Lib.GeoPoint,DEM.Net.Lib.GeoPoint,DEM.Net.Lib.GeoPoint)
  commentId: M:DEM.Net.Lib.DouglasPeucker.PerpendicularDistance(DEM.Net.Lib.GeoPoint,DEM.Net.Lib.GeoPoint,DEM.Net.Lib.GeoPoint)
  id: PerpendicularDistance(DEM.Net.Lib.GeoPoint,DEM.Net.Lib.GeoPoint,DEM.Net.Lib.GeoPoint)
  parent: DEM.Net.Lib.DouglasPeucker
  langs:
  - csharp
  - vb
  name: PerpendicularDistance(GeoPoint, GeoPoint, GeoPoint)
  nameWithType: DouglasPeucker.PerpendicularDistance(GeoPoint, GeoPoint, GeoPoint)
  fullName: DEM.Net.Lib.DouglasPeucker.PerpendicularDistance(DEM.Net.Lib.GeoPoint, DEM.Net.Lib.GeoPoint, DEM.Net.Lib.GeoPoint)
  type: Method
  source:
    remote:
      path: DEM.Net.Lib/Services/DouglasPeuckerReduction.cs
      branch: dev
      repo: https://github.com/xfischer/DEM.Net.git
    id: PerpendicularDistance
    path: ../DEM.Net.Lib/Services/DouglasPeuckerReduction.cs
    startLine: 90
  assemblies:
  - DEM.Net.Lib
  namespace: DEM.Net.Lib
  summary: "\nThe distance of a point from a line made from point1 and point2.\n"
  example: []
  syntax:
    content: public static double PerpendicularDistance(GeoPoint Point1, GeoPoint Point2, GeoPoint Point)
    parameters:
    - id: Point1
      type: DEM.Net.Lib.GeoPoint
    - id: Point2
      type: DEM.Net.Lib.GeoPoint
    - id: Point
      type: DEM.Net.Lib.GeoPoint
    return:
      type: System.Double
      description: ''
    content.vb: Public Shared Function PerpendicularDistance(Point1 As GeoPoint, Point2 As GeoPoint, Point As GeoPoint) As Double
  overload: DEM.Net.Lib.DouglasPeucker.PerpendicularDistance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DEM.Net.Lib
  commentId: N:DEM.Net.Lib
  name: DEM.Net.Lib
  nameWithType: DEM.Net.Lib
  fullName: DEM.Net.Lib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction*
  commentId: Overload:DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction
  name: DouglasPeuckerReduction
  nameWithType: DouglasPeucker.DouglasPeuckerReduction
  fullName: DEM.Net.Lib.DouglasPeucker.DouglasPeuckerReduction
- uid: System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
  commentId: T:System.Collections.Generic.List{DEM.Net.Lib.GeoPoint}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<GeoPoint>
  nameWithType: List<GeoPoint>
  fullName: System.Collections.Generic.List<DEM.Net.Lib.GeoPoint>
  nameWithType.vb: List(Of GeoPoint)
  fullName.vb: System.Collections.Generic.List(Of DEM.Net.Lib.GeoPoint)
  name.vb: List(Of GeoPoint)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DEM.Net.Lib.GeoPoint
    name: GeoPoint
    nameWithType: GeoPoint
    fullName: DEM.Net.Lib.GeoPoint
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DEM.Net.Lib.DouglasPeucker.PerpendicularDistance*
  commentId: Overload:DEM.Net.Lib.DouglasPeucker.PerpendicularDistance
  name: PerpendicularDistance
  nameWithType: DouglasPeucker.PerpendicularDistance
  fullName: DEM.Net.Lib.DouglasPeucker.PerpendicularDistance
- uid: DEM.Net.Lib.GeoPoint
  commentId: T:DEM.Net.Lib.GeoPoint
  parent: DEM.Net.Lib
  name: GeoPoint
  nameWithType: GeoPoint
  fullName: DEM.Net.Lib.GeoPoint
